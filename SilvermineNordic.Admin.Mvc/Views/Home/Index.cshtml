@using SilvermineNordic.Admin.Mvc.Services;
@using SilvermineNordic.Admin.Mvc.Models;
@model IndexViewModel

@{
    ViewData["Title"] = "Weather Charts";
    var weatherReadings = await Model.WeatherReadingsTask;
    var sensorReadings = await Model.SensorReadingsTask;
    var weatherForecasts = await Model.WeatherForecastTask;
    var thresholds = await Model.ThresholdsTask;

    var weatherForecastPrecipitationChartData = "";
    var weatherForecastTempChartData = "";
    var weatherForecastWindChartData = "";
    var first = true;
    var day = DateTime.MinValue.Day;
    var snowfallAccumulated = 0.0m;
    var rainfallAccumulated = 0.0m;
    foreach (var weatherForecast in weatherForecasts)
    {
        var dayOfTheWeekShort = weatherForecast.DateTimeUtc.ConvertUtcToTimezone("Central Standard Time")?.ToString("ddd") + " ";
        var time = $"\"{dayOfTheWeekShort}{weatherForecast.DateTimeUtc.ConvertUtcToTimezone("Central Standard Time")?.ToString("htt")}\"";
        if (!first) weatherForecastPrecipitationChartData += ",";
        if (!first) weatherForecastTempChartData += ",";
        if (!first) weatherForecastWindChartData += ",";
        var snowfallInIn = weatherForecast.SnowfallInCm.ConvertCentimetersToInches().RoundToOneDecimal();
        snowfallAccumulated += snowfallInIn;
        var rainfallInIn = weatherForecast.RainfallInCm.ConvertCentimetersToInches().RoundToOneDecimal();
        rainfallAccumulated += rainfallInIn;
        weatherForecastPrecipitationChartData += 
            $@"{{ time: {time}, snowCount: {snowfallInIn}, snowAccumulated: {(snowfallInIn > 0 ? snowfallAccumulated : 0)}, rainCount: {rainfallInIn}, rainAccumulated: {(rainfallInIn > 0 ? rainfallAccumulated : 0)} }}";
        weatherForecastTempChartData +=
            $@"{{ time: {time}, temp: {weatherForecast.TemperatureInCelcius.ConvertCelciusToFahrenheit().RoundToOneDecimal()}, feelsLike: {weatherForecast.FeelsLikeInCelcius.ConvertCelciusToFahrenheit().RoundToOneDecimal()} }}";
        weatherForecastWindChartData +=
            $@"{{ time: {time}, windSpeed: {weatherForecast.WindSpeed.RoundToOneDecimal()}, windGust: {weatherForecast.WindGust.RoundToOneDecimal()}, windDirection: {weatherForecast.WindDirection} }}";
        first = false;
    }
}

@section scripts {
    @* <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> *@
    <script src="~/js/chart.min.js"></script>
    <script type="text/javascript">
        function handleKeyPress(event) {
            if (event.key === "Enter") {
                console.log("Enter key was pressed");
                let zipCode = document.getElementById("zipCode").value;
                if (zipCode.length > 0) {
                    window.location.href = "/?zipCode=" + zipCode;
                } else {
                    window.location.href = "/";
                }
            }
        }
        window.addEventListener("load", function() {
            document.getElementById("zipCode").value = "@(Model.preferenceModel.zipCode)";
        });
    </script>
}


<div class="container">
    <div class="zip-code-container">
        <input type="text" placeholder="Zip Code" id="zipCode" onkeypress="handleKeyPress(event)" autocomplete='off'>
    </div>        
    <div>
        @* <row class="col align-items-center"> *@
            <h2 style="text-align: center;">@weatherForecasts.First().TemperatureInCelcius.ConvertCelciusToFahrenheit().RoundToZeroDecimals() F</h1>
        @* </row> *@
    </div>

    @if (snowfallAccumulated > 0 || rainfallAccumulated > 0)
    {
        <div style="max-width: 800px; margin: 0 auto; width: 100%;"><canvas id="precipitationChart"></canvas></div>
    } 
    else
    {
        <h2>No precipitation in the forecast.</h2>
    }
    <div style="max-width: 800px; margin: 0 auto; width: 100%;"><canvas id="tempChart"></canvas></div>
    
    <div style="max-width: 800px; margin: 0 auto; width: 100%;"><canvas id="windChart"></canvas></div>

    <script type="text/javascript">
        const precipitationData = [
            @Html.Raw(weatherForecastPrecipitationChartData)
        ];

        const precipitationChartDiv = document.getElementById('precipitationChart')
        if (precipitationChartDiv) {
            const ctx = precipitationChartDiv.getContext('2d');

            const precipitationChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: precipitationData.map(row => row.time),
                    datasets: [
                        {
                            label: 'Snow Forecast By Inches',
                            data: precipitationData.map(row => row.snowCount),
                            backgroundColor: 'rgba(73, 124, 155, 0.2)', // Optional: Set bar color
                            borderColor: 'rgba(73, 124, 155, 1)', // Optional: Set border color
                            borderWidth: 1 // Optional: Set border width
                        },
                        {
                            label: 'Snow Accumulated By Inches',
                            data: precipitationData.map(row => row.snowAccumulated),
                            backgroundColor: 'rgba(153, 204, 255, 0.2)', // Optional: Set bar color
                            borderColor: 'rgba(153, 204, 255, 1)', // Optional: Set border color
                            borderWidth: 1 // Optional: Set border width
                        },
                        {
                            label: 'Rain Forecast By Inches',
                            data: precipitationData.map(row => row.rainCount),
                            backgroundColor: 'rgba(193, 216, 195, 0.2)', // Optional: Set bar color
                            borderColor: 'rgba(193, 216, 195, 1)', // Optional: Set border color
                            borderWidth: 1 // Optional: Set border width
                        },
                        {
                            label: 'Rain Accumulated By Inches',
                            data: precipitationData.map(row => row.rainAccumulated),
                            backgroundColor: 'rgba(106, 156, 137, 0.2)', // Optional: Set bar color
                            borderColor: 'rgba(106, 156, 137, 1)', // Optional: Set border color
                            borderWidth: 1 // Optional: Set border width
                        }
                    ]
                }, //rgba(193, 216, 195, 1)
                options: { // Optional: Customize chart appearance
                    scales: {
                        y: {
                            beginAtZero: true, // Optional: Start y-axis at zero
                            suggestedMax: 3
                        }
                    }
                }
            });
        }
        
        const tempData = [
            @Html.Raw(weatherForecastTempChartData)
        ];
        const tempChartCtx = document.getElementById('tempChart').getContext('2d');

        const tempChart = new Chart(tempChartCtx, {
            type: 'line',
            data: {
                labels: tempData.map(row => row.time),
                datasets: [
                    {
                        label: 'Temp',
                        data: tempData.map(row => row.temp),
                        backgroundColor: 'rgba(126, 96, 191, .2)', // Optional: Set bar color
                        borderColor: 'rgba(126, 96, 191, 1)', // Optional: Set border color
                        borderWidth: 1, // Optional: Set border width
                        fill: '+1'
                    },
                    {
                        label: 'Feels Like',
                        data: tempData.map(row => row.feelsLike),
                        backgroundColor: 'rgba(228, 177, 240, .2)', // Optional: Set bar color
                        borderColor: 'rgba(228, 177, 240, 1)', // Optional: Set border color
                        borderWidth: 1 // Optional: Set border width
                    }
                ]
            }, //rgba(193, 216, 195, 1)
            options: { // Optional: Customize chart appearance
                scales: {
                    y: {
                        //beginAtZero: true, // Optional: Start y-axis at zero
                        suggestedMax: 100,
                        suggestedMin: 0
                    }
                }
            }
        });

        const windData = [
            @Html.Raw(weatherForecastWindChartData)
        ];
        const windChartCtx = document.getElementById('windChart').getContext('2d');

        const windChart = new Chart(windChartCtx, {
            type: 'line',
            data: {
                labels: windData.map(row => row.time),
                datasets: [
                    {
                        label: 'Wind Gust',
                        data: windData.map(row => row.windGust),
                        backgroundColor: 'rgba(126, 96, 191, .2)', // Optional: Set bar color
                        borderColor: 'rgba(126, 96, 191, 1)', // Optional: Set border color
                        borderWidth: 1, // Optional: Set border width
                        fill: '+1'
                    },
                    {
                        label: 'Wind',
                        data: windData.map(row => row.windSpeed),
                        backgroundColor: 'rgba(228, 177, 240, .2)', // Optional: Set bar color
                        borderColor: 'rgba(228, 177, 240, 1)', // Optional: Set border color
                        borderWidth: 1 // Optional: Set border width
                    }
                ]
            }, //rgba(193, 216, 195, 1)
            options: { // Optional: Customize chart appearance
                scales: {
                    y: {
                        //beginAtZero: true, // Optional: Start y-axis at zero
                        suggestedMax: 25,
                        suggestedMin: 0
                    }
                }
            }
        });
    </script> 

    @* <div class="grid">
        <div class="tablecard">
            <h3 class="description">Weather Reading</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>DateTime</th>
                        <th>Temp</th>
                        <th>Hum</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var wr in weatherReadings)
                    {
                        <tr key="0">
                            <td>@wr.DateTimeUtc.ConvertUtcToTimezone("Central Standard Time")?.ToString("ddd h:mm")</td>
                            <td>@wr.TemperatureInCelcius.ConvertCelciusToFahrenheit().RoundToOneDecimal()°</td>
                            <td>@wr.Humidity.RoundToOneDecimal()%</td>
                        </tr>
                    }
                    @if (!weatherReadings.Any())
                    {
                        <tr>
                            <td colSpan="4">No data available</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="tablecard">
            <h3 class="description">Sensor Readings</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>DateTime</th>
                        <th>Temp</th>
                        <th>Hum</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sr in sensorReadings)
                    {
                        <tr key="0">
                            <td>@sr.DateTimeUtc.ConvertUtcToTimezone("Central Standard Time")?.ToString("ddd h:mm")</td>
                            <td>@sr.TemperatureInCelcius.ConvertCelciusToFahrenheit().RoundToOneDecimal()°</td>
                            <td>@sr.Humidity.RoundToOneDecimal()%</td>
                        </tr>
                    }
                    @if (!sensorReadings.Any())
                    {
                        <tr>
                            <td colSpan="3">No data available</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="tablecard">
            <h3 class="description">Thresholds</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Temp Low</th>
                        <th>Temp High</th>
                        <th>Hum Low</th>
                        <th>Hum High</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var t in thresholds)
                    {
                        <tr key="0                    ">
                            <td>@t.TemperatureInCelciusLowThreshold.ConvertCelciusToFahrenheit().RoundToOneDecimal()°</td>
                            <td>@t.TemperatureInCelciusHighThreshold.ConvertCelciusToFahrenheit().RoundToOneDecimal()°</td>
                            <td>@t.HumidityLowThreshold.RoundToOneDecimal()%</td>
                            <td>@t.HumidityHighThreshold.RoundToOneDecimal()%</td>
                        </tr>
                    }
                    @if (!thresholds.Any())
                    {
                        <tr>
                            <td colSpan="4">No data available</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="tablecard">
            <h3 class="description">Weather Forecast</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>DateTime</th>
                        <th>Temp</th>
                        <th>Hum</th>
                        <th>SnowIn</th>
                        <th>RainIn</th>
                        <th>Zone</th>
                    </tr>
                </thead>
                @foreach (var wf in weatherForecasts)
                {
                    <tr key="0">
                        <td>@wf.DateTimeUtc.ConvertUtcToTimezone("Central Standard Time")?.ToString("ddd h:mm")</td>
                        <td>@wf.TemperatureInCelcius.ConvertCelciusToFahrenheit().RoundToOneDecimal()°</td>
                        <td>@wf.Humidity.RoundToOneDecimal()%</td>
                        <td>@wf.SnowfallInCm.ConvertCentimetersToInches().RoundToOneDecimal()</td>
                        <td>@wf.RainfallInCm.ConvertCentimetersToInches().RoundToOneDecimal()</td>
                        @if (wf.InTheZone)
                        {
                            <td><span style="color:green; font-size: 20px;">✔</span></td>
                        }
                        else 
                        {
                            <td></td>
                        }
                    </tr>
                }
                @if (!weatherForecasts.Any())
                {
                    <tr>
                        <td colSpan="4">No data available</td>
                    </tr>
                }
                </tbody>
            </table>
        </div> *@
    </div>
</div>

